{"version":3,"sources":["assets/Card.js","App.js","serviceWorker.js","index.js"],"names":["MediaCard","useState","name","url","IP","protocol","alexa","bigNames","className","map","Name","Card","CardActionArea","CardMedia","image","title","CardContent","Typography","gutterBottom","variant","component","color","App","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4VA+EeA,MAxEf,WAAsB,IAAD,EACaC,mBAAS,CACvC,CACEC,KAAM,WACNC,IACE,wEACFC,GAAI,gBACJC,SAAU,0DACVC,MAAO,GAET,CACEJ,KAAM,UACNC,IAAK,uDACLC,GAAI,eACJC,SAAU,0DACVC,MAAO,GAET,CACEJ,KAAM,SACNC,IAAK,wDACLC,GAAI,gBACJC,SAAU,0DACVC,MAAO,GAET,CACEJ,KAAM,UACNC,IAAK,uDACLC,GAAI,cACJC,SAAU,0DACVC,MAAO,MA7BQ,mBACZC,EADY,KAiCnB,OAjCmB,KAkCjB,yBAAKC,UAAU,aACZD,EAASE,KAAI,SAACC,GAAD,OACZ,kBAACC,EAAA,EAAD,CAAMH,UAAU,QACd,kBAACI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWL,UAAU,aAAaM,MAAOJ,EAAKP,IAAKY,MAAM,UACzD,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACET,UAAU,QACVU,cAAY,EACZC,QAAQ,KACRC,UAAU,KACVC,MAAM,WAELX,EAAKR,MAER,kBAACe,EAAA,EAAD,CACET,UAAU,KACVU,cAAY,EACZC,QAAQ,KACRC,UAAU,KACVC,MAAM,aALR,OAOOX,EAAKN,IAGZ,kBAACa,EAAA,EAAD,CAAYE,QAAQ,KAAKE,MAAM,cAAcD,UAAU,MAAvD,cAGA,kBAACH,EAAA,EAAD,CAAYE,QAAQ,KAAKE,MAAM,gBAAgBD,UAAU,MACtDV,EAAKL,kB,MC3CPiB,MAnBf,WACE,OACE,yBAAKd,UAAU,OACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,eACb,yBACEA,UAAU,aACVe,IAAI,0CACJC,IAAI,OAIV,yBAAKhB,UAAU,QACb,kBAAC,EAAD,SCTYiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.629ba7b1.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nfunction MediaCard() {\r\n  const [bigNames, setbigNames] = useState([\r\n    {\r\n      name: \"Facebook\",\r\n      url:\r\n        \"https://pngimg.com/uploads/facebook_logos/facebook_logos_PNG19764.png\",\r\n      IP: \"157.240.18.35\",\r\n      protocol: \"443/HTTPS_WWW, 80/HTTP, 80/HTTP_WWW, 443/HTTPS, 25/SMTP\",\r\n      alexa: 8,\r\n    },\r\n    {\r\n      name: \"Youtube\",\r\n      url: \"https://pngimg.com/uploads/youtube/youtube_PNG21.png\",\r\n      IP: \"172.217.4.46\",\r\n      protocol: \"443/HTTPS_WWW, 443/HTTPS, 80/HTTP_WWW, 25/SMTP, 80/HTTP\",\r\n      alexa: 2,\r\n    },\r\n    {\r\n      name: \"Google\",\r\n      url: \"https://pngimg.com/uploads/google/google_PNG19640.png\",\r\n      IP: \"172.217.8.174\",\r\n      protocol: \"443/HTTPS_WWW, 80/HTTP, 80/HTTP_WWW, 443/HTTPS, 25/SMTP\",\r\n      alexa: 1,\r\n    },\r\n    {\r\n      name: \"Netflix\",\r\n      url: \"https://pngimg.com/uploads/netflix/netflix_PNG26.png\",\r\n      IP: \"34.198.43.9\",\r\n      protocol: \"443/HTTPS_WWW, 80/HTTP, 80/HTTP_WWW, 443/HTTPS, 25/SMTP\",\r\n      alexa: 21,\r\n    },\r\n  ]);\r\n\r\n  return (\r\n    <div className=\"card_wrap\">\r\n      {bigNames.map((Name) => (\r\n        <Card className=\"card\">\r\n          <CardActionArea>\r\n            <CardMedia className=\"card_media\" image={Name.url} title=\"Names\" />\r\n            <CardContent>\r\n              <Typography\r\n                className=\"title\"\r\n                gutterBottom\r\n                variant=\"h2\"\r\n                component=\"h2\"\r\n                color=\"primary\"\r\n              >\r\n                {Name.name}\r\n              </Typography>\r\n              <Typography\r\n                className=\"ip\"\r\n                gutterBottom\r\n                variant=\"h4\"\r\n                component=\"h2\"\r\n                color=\"secondary\"\r\n              >\r\n                IP: {Name.IP}\r\n              </Typography>\r\n\r\n              <Typography variant=\"h6\" color=\"textPrimary\" component=\"h2\">\r\n                Protocols:\r\n              </Typography>\r\n              <Typography variant=\"h6\" color=\"textSecondary\" component=\"h2\">\r\n                {Name.protocol}\r\n              </Typography>\r\n            </CardContent>\r\n          </CardActionArea>\r\n        </Card>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\nexport default MediaCard;\r\n","import React from \"react\";\nimport \"./assets/Header.css\";\nimport \"./assets/Body.css\";\nimport Card from \"./assets/Card\";\nimport \"./assets/Card.css\";\n\n//Flexbox //Semantic-ui-react //useState //Material-UI\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <div className=\"header\">\n        <div className=\"header_icon\">\n          <img\n            className=\"header_img\"\n            src=\"https://censys.io/static/img/censys.png\"\n            alt=\"\"\n          />\n        </div>\n      </div>\n      <div className=\"card\">\n        <Card />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}